mes(9, 1.75, 1.82, 0.95, 10, 10)
mes(145, 50.61, 122, 89.01, 10, 10)
mes(8, 2.44, 2.25, 0.598, 10, 10)
mes(29.25, 22.44, 151, 101.96, 10, 10)
mes(8.25, 2.98, 1.25, .43, 6, 6)
mes(25, 7.39, 13.5, 3.77, 6, 6)
?mes
require(compute.es)
?mes
mes(3177, 945, 0, 0, 120, 120) ## 2002 abundance
wf.abd <- c(193, 87, 18)
wf.rch <- c(10, 6, 3)
control.abd <- c(69, 20, 6)
control.rch <- c(8, 6, 3)
print(paste("Control Rch Mean: ", mean(control.rch), " | Control Rch SE: ", sd(control.rch)/sqrt(length(control.rch))))
print(paste("Control Abd Mean: ", mean(control.abd), " | Control Abd SE: ", sd(control.abd)/sqrt(length(control.abd))))
print(paste("WF Rch Mean: ", mean(wf.rch), " | WF Abd SE: ", sd(wf.rch)/sqrt(length(wf.rch))))
print(paste("WF Abd Mean: ", mean(wf.abd), " | WF Abd SE: ", sd(wf.abd)/sqrt(length(wf.abd))))
mes(mean(wf.rch), mean(control.rch), sd(wf.rch), sd(control.rch), length(wf.rch), length(control.rch))
mes(mean(wf.abd), mean(control.abd), sd(wf.abd), sd(control.abd), length(wf.abd), length(control.abd))
1+1
sqrt(25)
sqrt   (25)
a <- 1+1
a
a <- c(1,2,3,4,5,6,7,8,9,10)
a
c?
?c
?c
?sqrt
b <- c(10,9,8,7.6,5,4,3,2,1)
b <- c(10,9,8,7,6,5,4,3,2,1)
dat <- cbind(a, b)
dat
dat1 <- rbind(a, b)
dat1
?r
dat
a
b
dat
plot(a, b, data=dat)
plot(dat$a, dat$b)
plot(dat[,1], dat[,2])
dat[1,2]
plot(dat[,1], dat[,2])
dat[7,1]
plot(dat[,1], dat[,2], xlab="Toxicity", ylab="Abundance")
rm(a)
rm(b)
rm(dat1)
dat
mod <- lm(dat[,1] ~ dat[,2])
summary(mod)
ln(10)
plot(dat[,1], dat[,2], xlab="Toxicity", ylab="Abundance")
abline(mod)
?abline
install.packages("compute.es")
wf.abd <- c(193, 87, 18)
wf.rch <- c(10, 6, 3)
control.abd <- c(69, 20, 6)
control.rch <- c(8, 6, 3)
print(paste("Control Rch Mean: ", mean(control.rch), " | Control Rch SE: ", sd(control.rch)/sqrt(length(control.rch))))
print(paste("Control Abd Mean: ", mean(control.abd), " | Control Abd SE: ", sd(control.abd)/sqrt(length(control.abd))))
?compute.es
mes(mean(wf.rch), mean(control.rch), sd(wf.rch), sd(control.rch), length(wf.rch), length(control.rch))
library(compute.es)
mes(mean(wf.rch), # average fire richness
mean(control.rch), # average control richness
sd(wf.rch), # standard deviation of fire richness
sd(control.rch), # standard deviation of control richness
length(wf.rch), # number of samples in fire sites
length(control.rch)) # number of samples control sites
mes(8, 8, 0.55*sqrt(66), 0.5*sqrt(66), 66, 66)
require(compute.es)
mes(8, 8, 0.55*sqrt(66), 0.5*sqrt(66), 66, 66)
mes(90, 95, 30*sqrt(66), 15*sqrt(66), 66, 66)
mes(8, 8, 0.55*sqrt(24), 0.5*sqrt(24), 24, 24)
mes(90, 95, 30*sqrt(24), 15*sqrt(24), 24, 24)
mes(0.85, 0.8, 0.17*sqrt(350), 0.3*sqrt(700), 350, 700)
mes(0.92, 0.81, 0.5*sqrt(350), 0.6*sqrt(700), 350, 700)
mes(0.045, 0.047, 0.005*sqrt(350), 0.0045*sqrt(700), 350, 700)
mes(0.06, 0.08, 0.06*sqrt(350), 0.09*sqrt(700), 350, 700)
mes(0.85, 0.8, 0.17*sqrt(700), 0.3*sqrt(700), 700, 700)
mes(0.045, 0.047, 0.005*sqrt(700), 0.0045*sqrt(700), 700, 700)
mes(0.92, 0.81, 0.5*sqrt(350), 0.6*sqrt(350), 350, 350)
mes(0.06, 0.08, 0.06*sqrt(350), 0.09*sqrt(350), 350, 350)
mes(0.2, 0.5, 0.1*sqrt(700), 0.2*sqrt(700), 700, 700)
mes(0.5, 0.5, 0.3*sqrt(350), 0.1*sqrt(350), 350, 350)
mes(0.045, 0.075, 0.03*sqrt(700), 0.025*sqrt(700), 700, 700)
mes(0.01, 0.015, 0.01*sqrt(350), 0.01*sqrt(350), 350, 350)
controlsN <- c(0.14, 0.15, 13.78, 4.6, 0.06, 0.06, 0.06, .69, 6.82, 1.15, 0.20, 0.12, 2.25, 1.86, 0.11)
controlsSD <- c(0.41, 0.65, 56.97, 12.58, 0.24, 0.24, 0.24, 1.36, 12.37, 1.55, 0.85, 0.36, 7.15, 6.33, 0.47)
burnedN <- c(0.08, 0.09, 0.08, 0.66, 0.21, 0.08, 0.25, 0.13, 0.17, 0.08, 0.09, 3.37, 0.65, 0.60, 0.09, 0.09, 0.38)
burnedSD <- c(0.29, 0.31, 0.29, 1.34, 0.50, 0.29, 0.45, 0.43, 0.40, 0.29, 0.31, 3.04, 0.98, 1.30, 0.31, 0.31, 0.90)
controlsM <- cbind(controlsN, controlsSD)
burnedM <- cbind(burnedN, burnedSD)
require(compute.es)
burnedM
controlsM
controlsPSD <- sqrt(
((controlsM[1,1] - 1)*controlsM[1,2]^2 +
(controlsM[2,1] - 1)*controlsM[2,2]^2 +
(controlsM[3,1] - 1)*controlsM[3,2]^2 +
(controlsM[4,1] - 1)*controlsM[4,2]^2 +
(controlsM[5,1] - 1)*controlsM[5,2]^2 +
(controlsM[6,1] - 1)*controlsM[6,2]^2 +
(controlsM[7,1] - 1)*controlsM[7,2]^2 +
(controlsM[8,1] - 1)*controlsM[8,2]^2 +
(controlsM[9,1] - 1)*controlsM[9,2]^2 +
(controlsM[10,1] - 1)*controlsM[10,2]^2 +
(controlsM[11,1] - 1)*controlsM[11,2]^2 +
(controlsM[12,1] - 1)*controlsM[12,2]^2 +
(controlsM[13,1] - 1)*controlsM[13,2]^2 +
(controlsM[14,1] - 1)*controlsM[14,2]^2 +
(controlsM[15,1] - 1)*controlsM[15,2]^2)/
(sum(controlsM[,1])-nrow(controlsM))
)
controlsPSD
burnedM
burnedPSD <- sqrt(
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
)
burnedPSD <- sqrt(
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
)
burnedPSD <- sqrt(
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
)
burnedM
controlsPSD <- sqrt(
((controlsM[1,1] - 1)*controlsM[1,2]^2 +
(controlsM[2,1] - 1)*controlsM[2,2]^2 +
(controlsM[3,1] - 1)*controlsM[3,2]^2 +
(controlsM[4,1] - 1)*controlsM[4,2]^2 +
(controlsM[5,1] - 1)*controlsM[5,2]^2 +
(controlsM[6,1] - 1)*controlsM[6,2]^2 +
(controlsM[7,1] - 1)*controlsM[7,2]^2 +
(controlsM[8,1] - 1)*controlsM[8,2]^2 +
(controlsM[9,1] - 1)*controlsM[9,2]^2 +
(controlsM[10,1] - 1)*controlsM[10,2]^2 +
(controlsM[11,1] - 1)*controlsM[11,2]^2 +
(controlsM[12,1] - 1)*controlsM[12,2]^2 +
(controlsM[13,1] - 1)*controlsM[13,2]^2 +
(controlsM[14,1] - 1)*controlsM[14,2]^2 +
(controlsM[15,1] - 1)*controlsM[15,2]^2)/
(sum(controlsM[,1])-nrow(controlsM))
)
controlsN <- c(0.14, 0.15, 13.78, 4.6, 0.06, 0.06, 0.06, .69, 6.82, 1.15, 0.20, 0.12, 2.25, 1.86, 0.11)
controlsSD <- c(0.41, 0.65, 56.97, 12.58, 0.24, 0.24, 0.24, 1.36, 12.37, 1.55, 0.85, 0.36, 7.15, 6.33, 0.47)
burnedN <- c(0.08, 0.09, 0.08, 0.66, 0.21, 0.08, 0.25, 0.13, 0.17, 0.08, 0.09, 3.37, 0.65, 0.60, 0.09, 0.09, 0.38)
burnedSD <- c(0.29, 0.31, 0.29, 1.34, 0.50, 0.29, 0.45, 0.43, 0.40, 0.29, 0.31, 3.04, 0.98, 1.30, 0.31, 0.31, 0.90)
controlsM <- cbind(controlsN, controlsSD)
burnedM <- cbind(burnedN, burnedSD)
controlsPSD <- sqrt(
((controlsM[1,1] - 1)*controlsM[1,2]^2 +
(controlsM[2,1] - 1)*controlsM[2,2]^2 +
(controlsM[3,1] - 1)*controlsM[3,2]^2 +
(controlsM[4,1] - 1)*controlsM[4,2]^2 +
(controlsM[5,1] - 1)*controlsM[5,2]^2 +
(controlsM[6,1] - 1)*controlsM[6,2]^2 +
(controlsM[7,1] - 1)*controlsM[7,2]^2 +
(controlsM[8,1] - 1)*controlsM[8,2]^2 +
(controlsM[9,1] - 1)*controlsM[9,2]^2 +
(controlsM[10,1] - 1)*controlsM[10,2]^2 +
(controlsM[11,1] - 1)*controlsM[11,2]^2 +
(controlsM[12,1] - 1)*controlsM[12,2]^2 +
(controlsM[13,1] - 1)*controlsM[13,2]^2 +
(controlsM[14,1] - 1)*controlsM[14,2]^2 +
(controlsM[15,1] - 1)*controlsM[15,2]^2)/
(sum(controlsM[,1])-nrow(controlsM))
)
burnedPSD <- sqrt(
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
)
nrow(burnedM)
burnedM
(burnedM[2,1] - 1)*burnedM[2,2]^2
(burnedM[1,1] - 1)*burnedM[1,2]^2
(burnedM[3,1] - 1)*burnedM[3,2]^2
(burnedM[4,1] - 1)*burnedM[4,2]^2
(burnedM[5,1] - 1)*burnedM[5,2]^2
(burnedM[6,1] - 1)*burnedM[6,2]^2
(burnedM[7,1] - 1)*burnedM[7,2]^2
(burnedM[8,1] - 1)*burnedM[8,2]^
2
(burnedM[9,1] - 1)*burnedM[9,2]^2
(burnedM[10,1] - 1)*burnedM[10,2]^2
(burnedM[11,1] - 1)*burnedM[11,2]^2
(burnedM[12,1] - 1)*burnedM[12,2]^2
(burnedM[13,1] - 1)*burnedM[13,2]^2
(burnedM[14,1] - 1)*burnedM[14,2]^2
(burnedM[15,1] - 1)*burnedM[15,2]^2
(burnedM[16,1] - 1)*burnedM[16,2]^2
(burnedM[17,1] - 1)*burnedM[17,2]^2
sum(burnedM[,1])-nrow(burnedM)
sqrt(
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
)
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)
((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM))
burnedPSD <- sqrt(
abs(((burnedM[1,1] - 1)*burnedM[1,2]^2 +
(burnedM[2,1] - 1)*burnedM[2,2]^2 +
(burnedM[3,1] - 1)*burnedM[3,2]^2 +
(burnedM[4,1] - 1)*burnedM[4,2]^2 +
(burnedM[5,1] - 1)*burnedM[5,2]^2 +
(burnedM[6,1] - 1)*burnedM[6,2]^2 +
(burnedM[7,1] - 1)*burnedM[7,2]^2 +
(burnedM[8,1] - 1)*burnedM[8,2]^2 +
(burnedM[9,1] - 1)*burnedM[9,2]^2 +
(burnedM[10,1] - 1)*burnedM[10,2]^2 +
(burnedM[11,1] - 1)*burnedM[11,2]^2 +
(burnedM[12,1] - 1)*burnedM[12,2]^2 +
(burnedM[13,1] - 1)*burnedM[13,2]^2 +
(burnedM[14,1] - 1)*burnedM[14,2]^2 +
(burnedM[15,1] - 1)*burnedM[15,2]^2 +
(burnedM[16,1] - 1)*burnedM[16,2]^2 +
(burnedM[17,1] - 1)*burnedM[17,2]^2)/
(sum(burnedM[,1])-nrow(burnedM)))
)
burnedPSD
require(compute.es)
mes(sum(burnedM[,1]), sum(controlsM[,1]), burnedPSD*sqrt(17), controlsPSD*sqrt(15), 17, 15)
mes(7.5, 19, 8.5, 7, 12, 18)
require(compute.es)
mes(7.5, 19, 8.5, 7, 12, 18)
mes(20, 16, 8, 8, 12, 12)
require(compute.es)
?mes
mes(5, 5, 2*sqrt(12), 1*sqrt(12), 12, 12)
mes(104.3, 118, 25.2*sqrt(12), 52.9*sqrt(12), 12, 12)
mes(2, 3, 1*sqrt(12), 1*sqrt(12), 12, 12)
mes(152.3, 106.7, 73*sqrt(12), 44.2*sqrt(12), 12, 12)
citation()
setwd("D:/004 GitHub/BIOL419_ordination")
ord <- metaMDS(L2)
ord
## ANOSIM: Elevation Class  ##
L.dist <- vegdist(L2)
L.ano.elev <- anosim(L.dist, R2$ElevationClass, permutations = 999)
summary(L.ano.elev)
## ANOSIM: Habitat  ##
L.dist <- vegdist(L2)
L.ano.hab <- anosim(L.dist, R2$Habitat, permutations = 999)
summary(L.ano.hab)
## Vector-fit: Elevation ##
vf <- envfit(ord, R2[,c(2,4:5)])
vf
## Code for testing fourth-corner method with Cascadia butterflies ##
## Call packages ##
library(ade4)
library(vegan)
## Read in matrixes ##
R <- read.csv("EnvironmentalMatrix.csv", header = TRUE) # read environmental data
L <- read.csv("AbundanceMatrixNormalized.csv", header = TRUE) # read transect data
Q <- read.csv("SpeciesTraitMatrix.csv", header = TRUE) # read trait data
## Convert to appropriate format ##
R2 <- R[,-1]
rownames(R2) <- R[,1]
L2 <- L[,-1]
rownames(L2) <- L[,1]
Q2 <- Q[,-1]
rownames(Q2) <- Q[,1]
## Drop transects with no abundance data ##
dropNames <- row.names(L2[rowSums(L2[]) == 0, ]) # get row names from 0 transect data
R2 <- R2[!row.names(R2) %in% dropNames, ]
L2 <- L2[!row.names(L2) %in% dropNames, ]
#############################################################################
## RLQ                                                                     ##
#############################################################################
coa1 <- dudi.coa(L2, scannf=FALSE, nf=2)
dudimil <- dudi.hillsmith(R2, scannf=FALSE, nf=2, row.w = coa1$lw)
duditrait <- dudi.hillsmith(Q2, scannf=FALSE, nf=2, row.w = coa1$cw)
rlq1 <- rlq(dudimil, coa1, duditrait, scannf=FALSE, nf=2) # conduct RLQ
plot(rlq1)
summary(rlq1)
rlq_rand <- randtest(rlq1)
## Final Plot for RLQ: Elevation Class ##
xlim <- range(rlq1$lR[,1])
ylim <- range(rlq1$lR[,2])
colVec <- c("black", "red")
plot.new()
plot.window(xlim=c(-5,5), ylim=c(-6,2), asp=0.5)
abline(h = 0, lty="dotted")
abline(v = 0, lty="dotted")
with(R2, points(rlq1$lR, col=colVec[ElevationClass], pch=21, bg=colVec[ElevationClass]), cex=0.5)
with(R2, legend("topright", legend=levels(ElevationClass), bty="n", col=colVec,
pch=21, pt.bg = colVec))
legend("bottomleft", legend=c("Elevation", "Broad Oligophagy", "Multiple Diapause"),
bty="n", col=c("black", "red", "blue"), lty=1)
arrows(0,0,rlq1$li[3,1], rlq1$li[3,2])
arrows(0,0,rlq1$co[4,1], rlq1$co[4,2], col="red")
arrows(0,0,rlq1$co[11,1], rlq1$co[11,2], col="blue")
text(-5,6, "Trait/Env. Factors Not Signficant")
axis(side = 1)
axis(side = 2)
title(xlab = "S1", ylab="S2", main="RLQ for Cascadian Butterfly Transects By Elevation Class")
box()
## Final Plot for RLQ: Habitat ##
xlim <- range(rlq1$lR[,1])
ylim <- range(rlq1$lR[,2])
colVec <- c("black", "blue", "red")
plot.new()
plot.window(xlim=c(-5,5), ylim=c(-6,6), asp=0.5)
abline(h = 0, lty="dotted")
abline(v = 0, lty="dotted")
with(R2, points(rlq1$lR, col=colVec[Habitat], pch=21, bg=colVec[Habitat]), cex=0.5)
with(R2, legend("topright", legend=levels(Habitat), bty="n", col=colVec,
pch=21, pt.bg = colVec))
legend("bottomleft", legend=c("Elevation", "Broad Oligophagy", "Multiple Diapause"),
bty="n", col=c("black", "red", "blue"), lty=1)
arrows(0,0,rlq1$li[3,1], rlq1$li[3,2])
arrows(0,0,rlq1$co[4,1], rlq1$co[4,2], col="red")
arrows(0,0,rlq1$co[11,1], rlq1$co[11,2], col="blue")
text(-5,6, "Trait/Env. Factors Not Signficant")
axis(side = 1)
axis(side = 2)
title(xlab = "S1", ylab="S2", main="RLQ for Cascadian Butterfly Transects By Habitat")
box()
##################################################################################
## NMDS                                                                         ##
##################################################################################
ord <- metaMDS(L2)
ord
## ANOSIM: Elevation Class  ##
L.dist <- vegdist(L2)
L.ano.elev <- anosim(L.dist, R2$ElevationClass, permutations = 999)
summary(L.ano.elev)
## ANOSIM: Habitat  ##
L.dist <- vegdist(L2)
L.ano.hab <- anosim(L.dist, R2$Habitat, permutations = 999)
summary(L.ano.hab)
## Vector-fit: Elevation ##
vf <- envfit(ord, R2[,c(2,4:5)])
vf
par(mfrow=c(1,1))
## Final Plot for NMDS: Elevation Class ##
scrs <- scores(ord, display=c("sites", "species"), scaling=scl)
colVec <- c("black", "red")
xlim <- range(scrs[,1])
ylim <- range(scrs[,2])
plot.new()
plot.window(xlim=xlim, ylim=ylim, asp=1)
abline(h = 0, lty="dotted")
abline(v = 0, lty="dotted")
with(R2, points(scrs, col=colVec[ElevationClass], pch=21, bg=colVec[ElevationClass]))
with(R2, legend("topright", legend=levels(ElevationClass), bty="n", col=colVec,
pch=21, pt.bg = colVec))
with(R2, ordiellipse(ord, ElevationClass, col=colVec))
plot(vf, p.max=0.1)
text(2,-1.5, paste("ANOSIM p-value: ", L.ano.elev$signif))
axis(side = 1)
axis(side = 2)
title(xlab = "NMDS 1", ylab="NMDS 2", main="NMDS Plot for Cascadian Butterfly Transects By Elevation Class")
box()
## Final Plot for NMDS: Habitat ##
scrs <- scores(ord, display=c("sites", "species"), scaling=scl)
colVec <- c("black", "blue", "red")
xlim <- range(scrs[,1])
ylim <- range(scrs[,2])
plot.new()
plot.window(xlim=xlim, ylim=ylim, asp=1)
abline(h = 0, lty="dotted")
abline(v = 0, lty="dotted")
with(R2, points(scrs, col=colVec[Habitat], pch=21, bg=colVec[Habitat]))
with(R2, legend("topright", legend=levels(Habitat), bty="n", col=colVec,
pch=21, pt.bg = colVec))
with(R2, ordiellipse(ord, Habitat, col=colVec))
plot(vf, p.max=0.1)
text(2,-1.5, paste("ANOSIM p-value: ", L.ano.hab$signif))
axis(side = 1)
axis(side = 2)
title(xlab = "NMDS 1", ylab="NMDS 2", main="NMDS Plot for Cascadian Butterfly Transects By Habitat")
box()
################################################################################
## 4th Corner                                                                 ##
################################################################################
fcQ <- fourthcorner.rlq(rlq1, type="Q.axes") # test trait signficance to rlq axes
ord <- metaMDS(L2)
ord
## ANOSIM: Elevation Class  ##
L.dist <- vegdist(L2)
L.ano.elev <- anosim(L.dist, R2$ElevationClass, permutations = 999)
summary(L.ano.elev)
## ANOSIM: Habitat  ##
L.dist <- vegdist(L2)
L.ano.hab <- anosim(L.dist, R2$Habitat, permutations = 999)
summary(L.ano.hab)
## Vector-fit: Elevation ##
vf <- envfit(ord, R2[,c(2,4:5)])
vf
